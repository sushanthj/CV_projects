I"³—<details open="">
  <summary class="text-delta">
    Table of contents
  </summary>
<ol id="markdown-toc">
  <li><a href="#before-you-begin" id="markdown-toc-before-you-begin">Before you Begin</a></li>
  <li><a href="#images-and-arrays" id="markdown-toc-images-and-arrays">Images and Arrays</a>    <ol>
      <li><a href="#image-operations" id="markdown-toc-image-operations">Image Operations</a>        <ol>
          <li><a href="#importing-images" id="markdown-toc-importing-images">Importing Images</a></li>
          <li><a href="#converting-image-to-greyscale" id="markdown-toc-converting-image-to-greyscale">Converting image to Greyscale</a></li>
          <li><a href="#plotting-an-image" id="markdown-toc-plotting-an-image">Plotting an image</a></li>
        </ol>
      </li>
      <li><a href="#array-functions-and-operations" id="markdown-toc-array-functions-and-operations">Array Functions and Operations</a></li>
      <li><a href="#array-nomenclature" id="markdown-toc-array-nomenclature">Array Nomenclature</a>        <ol>
          <li><a href="#sum-function-in-1d" id="markdown-toc-sum-function-in-1d">sum() function in 1D</a></li>
          <li><a href="#sum-in-2d-along-axes" id="markdown-toc-sum-in-2d-along-axes">sum() in 2D along axes</a></li>
          <li><a href="#looping-over-an-image-and-grayscale" id="markdown-toc-looping-over-an-image-and-grayscale">Looping over an Image and Grayscale</a>            <ol>
              <li><a href="#method-1--consider-this-method-of-converting-image-into-greyscale" id="markdown-toc-method-1--consider-this-method-of-converting-image-into-greyscale">Method 1 : Consider this method of converting image into greyscale:</a></li>
              <li><a href="#method-2-accounting-for-luminance-perception" id="markdown-toc-method-2-accounting-for-luminance-perception">Method 2: Accounting for Luminance Perception</a></li>
              <li><a href="#method-3-simpler-code-using-numpymean" id="markdown-toc-method-3-simpler-code-using-numpymean">Method 3: Simpler code using numpy.mean</a></li>
            </ol>
          </li>
        </ol>
      </li>
    </ol>
  </li>
  <li><a href="#built-in-numpy-functions" id="markdown-toc-built-in-numpy-functions">Built-in Numpy functions</a>    <ol>
      <li><a href="#difference-between-dot-matmul-and-" id="markdown-toc-difference-between-dot-matmul-and-">Difference between dot, matmul, and *</a></li>
      <li><a href="#plotting-a-pixel-wise-histogram" id="markdown-toc-plotting-a-pixel-wise-histogram">Plotting a pixel-wise histogram</a></li>
      <li><a href="#reshaping-arrays" id="markdown-toc-reshaping-arrays">Reshaping Arrays</a></li>
      <li><a href="#transpose-of-a-matrix" id="markdown-toc-transpose-of-a-matrix">Transpose of a matrix</a></li>
      <li><a href="#padding-of-matrices" id="markdown-toc-padding-of-matrices">Padding of Matrices</a></li>
      <li><a href="#newaxis-method" id="markdown-toc-newaxis-method">newaxis method</a></li>
      <li><a href="#einsum" id="markdown-toc-einsum">einsum</a></li>
      <li><a href="#stacking-rows-using-vstack" id="markdown-toc-stacking-rows-using-vstack">Stacking rows using vstack</a></li>
      <li><a href="#saving-a-numpy-matrix-in-a-text-file" id="markdown-toc-saving-a-numpy-matrix-in-a-text-file">Saving a numpy matrix in a text file</a></li>
    </ol>
  </li>
</ol>

</details>

<h1 class="fs-9" id="before-you-begin">Before you Begin</h1>

<p><a href="http://scipy-lectures.org/intro/numpy/array_object.html#indexing-and-slicing" class="btn fs-5 mb-4 mb-md-0">Official Documentation</a></p>

<p>Numpy and Scipy are two resources to compute a variety of functions on matrices. Scipy is built on top of numpy and has a larger codebase of modules which we can utilize</p>

<p><img src="/images/numpy_axes.png" alt="" /></p>

<h1 id="images-and-arrays">Images and Arrays</h1>

<h2 id="image-operations">Image Operations</h2>

<h3 id="importing-images">Importing Images</h3>

<p>In the below code we input an image and convert it into an array. <br />
Shape of an array is just itâ€™s size</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">im</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'empire.jpg'</span><span class="p">))</span>
<span class="k">print</span> <span class="n">im</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">im</span><span class="p">.</span><span class="n">dtype</span>

</code></pre></div></div>
<p>The output would look lik this:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">(</span><span class="mi">800</span><span class="p">,</span> <span class="mi">569</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span> <span class="n">uint8</span> <span class="p">(</span><span class="n">RGB</span> <span class="n">image</span><span class="p">)</span>
</code></pre></div></div>
<h3 id="converting-image-to-greyscale">Converting image to Greyscale</h3>

<p>This uses an extra library called Python Pillow</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageOps</span>
<span class="n">im</span> <span class="o">=</span> <span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'empire.jpg'</span><span class="p">).</span><span class="n">convert</span><span class="p">(</span><span class="s">'L'</span><span class="p">),</span><span class="s">'f'</span><span class="p">)</span>
<span class="k">print</span> <span class="n">im</span><span class="p">.</span><span class="n">shape</span><span class="p">,</span> <span class="n">im</span><span class="p">.</span><span class="n">dtype</span>

</code></pre></div></div>

<h3 id="plotting-an-image">Plotting an image</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'House2.jpg'</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span>

</code></pre></div></div>

<h2 id="array-functions-and-operations">Array Functions and Operations</h2>

<h2 id="array-nomenclature">Array Nomenclature</h2>

<p><img src="/images/3D_matrix_nomenclature.png" alt="" /></p>

<p><b> Itâ€™s important to realise that we only care about shapes of a matrix and our computation revolves around the shape tuple (1,2,3) irrespective of which is row or column. Develop a generalized version of matrix definitions!!</b></p>

<p>An image can have shape as (640,540,3). Here we need to think in the way that there are 640 rows and 540 columns and 3 RGB channels. Therefore, rows, columns, pages donâ€™t matter much. Just think in terms of shapes.</p>

<h3 id="sum-function-in-1d">sum() function in 1D</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span> 
<span class="n">arr</span> <span class="o">=</span> <span class="p">[</span><span class="mi">20</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="p">.</span><span class="mi">2</span><span class="p">,</span> <span class="mi">10</span><span class="p">,</span> <span class="mi">4</span><span class="p">]</span>  
   
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Sum of arr : "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span> 
   
<span class="k">print</span><span class="p">(</span><span class="s">"Sum of arr(uint8) : "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">dtype</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">uint8</span><span class="p">))</span> 
<span class="k">print</span><span class="p">(</span><span class="s">"Sum of arr(float32) : "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">dtype</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">float32</span><span class="p">))</span>
</code></pre></div></div>
<p>Output:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span> <span class="p">:</span>  <span class="mf">36.2</span>
<span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span><span class="p">(</span><span class="n">uint8</span><span class="p">)</span> <span class="p">:</span>  <span class="mi">36</span>
<span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span><span class="p">(</span><span class="n">float32</span><span class="p">)</span> <span class="p">:</span>  <span class="mf">36.2</span>
</code></pre></div></div>
<p>In 1D it just computes the sum of all elements in the array.
It can also do type conversion on the go.</p>

<p>We can extend this same logic to 2D, there too it calculates the sum of all matrix elements</p>

<h3 id="sum-in-2d-along-axes">sum() in 2D along axes</h3>

<p>Axis along which we want to calculate the sum value. Otherwise, it will consider arr to be flattened(works on all the axis).</p>

<p>axis = 0 means it calculates sum of all elements in ith column and (i=1)th column..</p>

<p>axis = 1 means it calculates sum of all elements in (j)th column and (j+1)th column..</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">arr</span> <span class="o">=</span> <span class="p">[[</span><span class="mi">14</span><span class="p">,</span> <span class="mi">17</span><span class="p">,</span> <span class="mi">12</span><span class="p">,</span> <span class="mi">33</span><span class="p">,</span> <span class="mi">44</span><span class="p">],</span>   
       <span class="p">[</span><span class="mi">15</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">27</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">19</span><span class="p">],</span>  
       <span class="p">[</span><span class="mi">23</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">54</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,]]</span>  
   
<span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Sum of arr : "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">))</span> 
<span class="k">print</span><span class="p">(</span><span class="s">"Sum of arr(axis = 0) : "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">))</span> 
<span class="k">print</span><span class="p">(</span><span class="s">"Sum of arr(axis = 1) : "</span><span class="p">,</span> <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">))</span>
</code></pre></div></div>

<p>Output would be:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span> <span class="p">:</span>  <span class="mi">279</span>
<span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">:</span>  <span class="p">[</span><span class="mi">52</span> <span class="mi">25</span> <span class="mi">93</span> <span class="mi">42</span> <span class="mi">67</span><span class="p">]</span>
<span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span><span class="p">(</span><span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">:</span>  <span class="p">[</span><span class="mi">120</span>  <span class="mi">75</span>  <span class="mi">84</span><span class="p">]</span>
</code></pre></div></div>

<p>But notice how the vector of axis = 1 has been transposed to show as a row vector</p>

<p>We change that behaviour by adding a second argument to the sum() function:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">print</span><span class="p">(</span><span class="s">"</span><span class="se">\n</span><span class="s">Sum of arr (keepdimension is True): </span><span class="se">\n</span><span class="s">"</span><span class="p">,</span>
      <span class="n">np</span><span class="p">.</span><span class="nb">sum</span><span class="p">(</span><span class="n">arr</span><span class="p">,</span> <span class="n">axis</span> <span class="o">=</span> <span class="mi">1</span><span class="p">,</span> <span class="n">keepdims</span> <span class="o">=</span> <span class="bp">True</span><span class="p">))</span>
</code></pre></div></div>

<p>Output</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">Sum</span> <span class="n">of</span> <span class="n">arr</span> <span class="p">(</span><span class="n">keepdimension</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">):</span> 
 <span class="p">[[</span><span class="mi">120</span><span class="p">]</span>
 <span class="p">[</span> <span class="mi">75</span><span class="p">]</span>
 <span class="p">[</span> <span class="mi">84</span><span class="p">]]</span>
</code></pre></div></div>

<h3 id="looping-over-an-image-and-grayscale">Looping over an Image and Grayscale</h3>

<p>We can loop over individual elements in a matrix after knowing the shape of the matrix</p>

<p>The shape of the image is given as a tuple eg. (640, 540, 3)</p>
<ul>
  <li>the last item of that tuple is the RGB spectrum (3 dimensions per pixel)</li>
  <li>the first two items in the tuple is the actual size of the image</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
    <span class="k">print</span><span class="p">()</span>

</code></pre></div></div>

<p>In the above code we are looping over the rows. Therefore we are looping 640 times.</p>

<h4 id="method-1--consider-this-method-of-converting-image-into-greyscale">Method 1 : Consider this method of converting image into greyscale:</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageOps</span>

<span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'B1.jpg'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="n">grey_value</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">]):</span>
            <span class="n">grey_value</span> <span class="o">+=</span> <span class="n">img</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">]</span>
        <span class="n">img</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">grey_value</span><span class="o">/</span><span class="mi">3</span><span class="p">)</span>
<span class="n">img2</span> <span class="o">=</span> <span class="n">img</span><span class="p">[:,:,</span><span class="mi">1</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>
<p>Also note how we removed the third (extra) dimensions using:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>img2 = img[:,:,1]
</code></pre></div></div>
<p>This method uses averaging to find grayscale. However a slightly modified version is usually preferred:</p>

<h4 id="method-2-accounting-for-luminance-perception">Method 2: Accounting for Luminance Perception</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span><span class="p">,</span> <span class="n">ImageOps</span>

<span class="n">weight</span> <span class="o">=</span> <span class="p">[</span><span class="mf">0.2989</span><span class="p">,</span> <span class="mf">0.5870</span><span class="p">,</span> <span class="mf">0.1140</span><span class="p">]</span>

<span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'B1.jpg'</span><span class="p">))</span>
<span class="k">print</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]):</span>
    <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">img</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">1</span><span class="p">]):</span>
        <span class="n">grey_value</span> <span class="o">=</span> <span class="mi">0</span>
        <span class="k">for</span> <span class="n">k</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">weight</span><span class="p">)):</span>
            <span class="n">grey_value</span> <span class="o">+=</span> <span class="p">(</span><span class="n">img</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">k</span><span class="p">]</span><span class="o">*</span><span class="n">weight</span><span class="p">[</span><span class="n">k</span><span class="p">])</span>
        <span class="n">img</span><span class="p">[</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="mi">0</span><span class="p">]</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="n">grey_value</span><span class="p">)</span>
<span class="n">img2</span> <span class="o">=</span> <span class="n">img</span><span class="p">[:,:,</span><span class="mi">1</span><span class="p">]</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img2</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">"gray"</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h4 id="method-3-simpler-code-using-numpymean">Method 3: Simpler code using numpy.mean</h4>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="n">color_img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'B1.jpg'</span><span class="p">))</span> <span class="o">/</span> <span class="mi">255</span>
<span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">mean</span><span class="p">(</span><span class="n">color_img</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">2</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">8</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">img</span><span class="p">,</span> <span class="n">cmap</span><span class="o">=</span><span class="n">plt</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">"gray"</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h1 id="built-in-numpy-functions">Built-in Numpy functions</h1>

<h2 id="difference-between-dot-matmul-and-">Difference between dot, matmul, and *</h2>

<p><img src="/images/np.dot.png" alt="" /></p>

<h2 id="plotting-a-pixel-wise-histogram">Plotting a pixel-wise histogram</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">img</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="s">'emma_stone.jpg'</span><span class="p">))</span>
<span class="n">img_flat</span> <span class="o">=</span> <span class="n">img</span><span class="p">.</span><span class="n">flatten</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">img_flat</span><span class="p">,</span> <span class="n">bins</span><span class="o">=</span><span class="mi">200</span><span class="p">,</span> <span class="nb">range</span><span class="o">=</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">256</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">title</span><span class="p">(</span><span class="s">"Number of pixels in each intensity value"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">"Intensity"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">"Number of pixels"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<h2 id="reshaping-arrays">Reshaping Arrays</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">4</span><span class="p">).</span><span class="n">reshape</span><span class="p">((</span><span class="mi">2</span><span class="p">,</span><span class="mi">2</span><span class="p">))</span>
<span class="n">x</span>
<span class="o">&gt;&gt;</span><span class="n">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>
</code></pre></div></div>

<h2 id="transpose-of-a-matrix">Transpose of a matrix</h2>

<p>Simple transpose is done using the matrix.transpose() or matrix.T method (both are same). One of them is showed below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># (refer matrix x in above example)
</span><span class="n">np</span><span class="p">.</span><span class="n">transpose</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
<span class="n">array</span><span class="p">([[</span><span class="mi">0</span><span class="p">,</span> <span class="mi">2</span><span class="p">],</span>
       <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">]])</span>
</code></pre></div></div>

<p>However the transpose function takes more arguments and this is important for 3D matrices.</p>

<p><i>Note that if a 3D matrix say â€˜Aâ€™ has shape (1,2,3), the result of transpose without specifying any extra argument will be (3,2,1)</i></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>x = np.ones((1, 2, 3))
np.transpose(x, (1, 0, 2)).shape
&gt;&gt;(2, 1, 3)
</code></pre></div></div>
<p><i>Note. While declaring array as in np.ones(1,2,3). This can be interpreted in two ways:</i></p>

<ul>
  <li>If we are printing the array in terminal we will read it as: there are 1 pages, 2 rows and 3 columns</li>
  <li>If itâ€™s an image, the shape will be 1 row, 2 coulmns and 3 will be for 3 RGB channels</li>
</ul>

<p><b> Itâ€™s important to realise that we only care about shapes of a matrix and our computation revolves around the shape tuple (1,2,3) irrespective of which is row or column. Develop a generalized version of matrix definitions!!</b></p>

<p>However, we will access each row/column starting from 0 as x[0,0,0] or x[1,1,1].</p>

<p>The second argument stands for the axes parameter. Axes are numbered as 0,1,2</p>

<p>i.e. default configuration of axes is (0,1,2) for a 3D array and (0,1) for a 2D array</p>

<p>Therefore if we specify &lt;np.transpose(x,(1,0,2))&gt; weâ€™re saying that we want the first two shapes interchanged.</p>

<p>Remember that first two shapes are pages and rows. Hence, those two will interchange.</p>

<h2 id="padding-of-matrices">Padding of Matrices</h2>

<p>Padding is used to ensure overall image size does not reduce while run filters/convulutions on it</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">ones</span><span class="p">(</span><span class="mi">3</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">pad</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">pad_width</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">y</span>

<span class="c1"># Expected result
# array([0., 1., 1., 1., 0.])
</span></code></pre></div></div>

<h2 id="newaxis-method">newaxis method</h2>

<p>ref: <a href="http://scipy-lectures.org/intro/numpy/array_object.html#indexing-and-slicing">newaxis</a></p>

<p>This method can be used to convert a row vector to a column vector and at the same time add another dimension as shown below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">a</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="mi">1</span><span class="p">,</span><span class="mi">2</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">a</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<p>Output: (3,)</p>

<p>Now lets do the newaxis modification:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">c</span> <span class="o">=</span> <span class="p">(</span><span class="n">a</span><span class="p">[:,</span> <span class="n">np</span><span class="p">.</span><span class="n">newaxis</span><span class="p">])</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">c</span><span class="p">.</span><span class="n">shape</span><span class="p">)</span>
</code></pre></div></div>

<p>Output:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[[</span><span class="mi">0</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">1</span><span class="p">]</span>
 <span class="p">[</span><span class="mi">2</span><span class="p">]]</span>

<span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>
<p>Therefore we can see that the vector has been rotated and another dimension has been added to the shape tuple</p>

<h2 id="einsum">einsum</h2>

<p>Refer to this document: <a href="https://ajcr.net/Basic-guide-to-einsum/">einsum</a></p>

<h2 id="stacking-rows-using-vstack">Stacking rows using vstack</h2>

<p>We can use this function to stack rows onto an exiting numpy array.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">in_arr1</span> <span class="o">=</span> <span class="n">geek</span><span class="p">.</span><span class="n">array</span><span class="p">([</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">]</span> <span class="p">)</span>
  
<span class="n">in_arr2</span> <span class="o">=</span> <span class="n">geek</span><span class="p">.</span><span class="n">array</span><span class="p">([</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">]</span> <span class="p">)</span>
  
<span class="c1"># Stacking the two arrays vertically
</span><span class="n">out_arr</span> <span class="o">=</span> <span class="n">geek</span><span class="p">.</span><span class="n">vstack</span><span class="p">((</span><span class="n">in_arr1</span><span class="p">,</span> <span class="n">in_arr2</span><span class="p">))</span>
<span class="k">print</span> <span class="p">(</span><span class="n">out_arr</span><span class="p">)</span>
</code></pre></div></div>

<p>Practically we can use this in a specific case. If we donâ€™t know the number of rows we will be adding to a numpy array:</p>

<ul>
  <li>We will define the array as a 0 row array</li>
  <li>We then add rows as we progress using the vstack function</li>
</ul>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">word_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">([]).</span><span class="n">reshape</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="n">maxlength</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">message</span> <span class="ow">in</span> <span class="n">messages</span><span class="p">:</span>
        <span class="n">word_count</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">zeros</span><span class="p">((</span><span class="mi">1</span><span class="p">,</span> <span class="n">word_num</span><span class="p">))</span>
        <span class="k">for</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">:</span>
            <span class="k">if</span> <span class="n">word</span>  <span class="o">==</span> <span class="s">"yes"</span><span class="p">:</span>
                <span class="n">word_count</span><span class="p">[</span><span class="mi">0</span><span class="p">,</span> <span class="n">word_dictionary</span><span class="p">[</span><span class="n">word</span><span class="p">]]</span> <span class="o">+=</span> <span class="mi">1</span>
        <span class="n">word_array</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">vstack</span><span class="p">([</span><span class="n">word_array</span><span class="p">,</span> <span class="n">word_count</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">word_array</span>
</code></pre></div></div>

<h2 id="saving-a-numpy-matrix-in-a-text-file">Saving a numpy matrix in a text file</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">np</span><span class="p">.</span><span class="n">savetxt</span><span class="p">(</span><span class="s">'./output/p06_sample_train_matrix'</span><span class="p">,</span> <span class="n">train_matrix</span><span class="p">[:</span><span class="mi">100</span><span class="p">,:])</span>
</code></pre></div></div>
:ET